diff --git a/node_modules/lib0/random.js b/node_modules/lib0/random.js
index 741e5f1..c7f48ee 100644
--- a/node_modules/lib0/random.js
+++ b/node_modules/lib0/random.js
@@ -1,37 +1,67 @@
 /**
- * Isomorphic module for true random numbers / buffers / uuids.
- *
- * Attention: falls back to Math.random if the browser does not support crypto.
- *
- * @module random
+ * Expo-compatible random module for Yjs (patched)
+ * Author: Ankan Fix
  */
 
 import * as math from './math.js'
 import * as binary from './binary.js'
-import { getRandomValues } from 'lib0/webcrypto'
 
+/**
+ * Try to safely get cryptographic random values.
+ * Falls back to Math.random if unavailable (Expo environment).
+ */
+let safeGetRandomValues = (arr) => {
+  for (let i = 0; i < arr.length; i++) {
+    arr[i] = Math.floor(Math.random() * 256)
+  }
+  return arr
+}
+
+try {
+  if (globalThis.crypto && typeof globalThis.crypto.getRandomValues === 'function') {
+    safeGetRandomValues = globalThis.crypto.getRandomValues.bind(globalThis.crypto)
+  }
+} catch (e) {
+  // ignore â€” fallback already set
+}
+
+/**
+ * Random float (not cryptographically secure)
+ */
 export const rand = Math.random
 
-export const uint32 = () => getRandomValues(new Uint32Array(1))[0]
+/**
+ * Random 32-bit unsigned integer
+ */
+export const uint32 = () => {
+  const arr = new Uint32Array(1)
+  safeGetRandomValues(arr)
+  return arr[0]
+}
 
+/**
+ * Random 53-bit integer
+ */
 export const uint53 = () => {
-  const arr = getRandomValues(new Uint32Array(8))
+  const arr = new Uint32Array(2)
+  safeGetRandomValues(arr)
   return (arr[0] & binary.BITS21) * (binary.BITS32 + 1) + (arr[1] >>> 0)
 }
 
 /**
+ * Returns a random element from array
  * @template T
  * @param {Array<T>} arr
  * @return {T}
  */
 export const oneOf = arr => arr[math.floor(rand() * arr.length)]
 
-// @ts-ignore
-const uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11
-
 /**
- * @return {string}
+ * UUID v4 generator
  */
-export const uuidv4 = () => uuidv4Template.replace(/[018]/g, /** @param {number} c */ c =>
-  (c ^ uint32() & 15 >> c / 4).toString(16)
-)
+const uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11
+
+export const uuidv4 = () =>
+  uuidv4Template.replace(/[018]/g, c =>
+    (c ^ uint32() & 15 >> c / 4).toString(16)
+  )
